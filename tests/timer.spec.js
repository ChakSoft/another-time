/* global describe, it */

const assert = require('assert')
const Timer = require('../lib/timer')

describe('Timer Specs', () => {
  describe('Creation', () => {
    it('create timer without any argument should initialize with default values', () => {
      const timer = new Timer()
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('create timer with initial date should initialize the timer with given values', () => {
      const timer = new Timer({
        is : 0,
        im : 35,
        ih : 14,
        id : 3,
        it : 7,
        iy : 11,
      })
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 35)
      assert.strictEqual(timer.hour, 14)
      assert.strictEqual(timer.day, 3)
      assert.strictEqual(timer.month, 7)
      assert.strictEqual(timer.year, 11)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Seconds', () => {
    it('add seconds should add given number of seconds', () => {
      const timer = new Timer()
      timer.addSecond(4)
      assert.strictEqual(timer.second, 4)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add more than 60 seconds should add minutes too', () => {
      const timer = new Timer()
      timer.addSecond(75)
      assert.strictEqual(timer.second, 15)
      assert.strictEqual(timer.minute, 1)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Minutes', () => {
    it('add minutes should add given number of minutes', () => {
      const timer = new Timer()
      timer.addMinute(4)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 4)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add a real number of minutes should add seconds too', () => {
      const timer = new Timer()
      timer.addMinute(1.5)
      assert.strictEqual(timer.second, 30)
      assert.strictEqual(timer.minute, 1)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add more than 60 minutes should add hours too', () => {
      const timer = new Timer()
      timer.addMinute(85)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 25)
      assert.strictEqual(timer.hour, 1)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add less than 0 minute should only add seconds', () => {
      const timer = new Timer()
      timer.addMinute(0.25)
      assert.strictEqual(timer.second, 15)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Hours', () => {
    it('add hours should add given number of hours', () => {
      const timer = new Timer()
      timer.addHour(4)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 4)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add a real number of hours should add minutes and seconds too', () => {
      const timer = new Timer()
      timer.addHour(5.72)
      assert.strictEqual(timer.second, 11)
      assert.strictEqual(timer.minute, 43)
      assert.strictEqual(timer.hour, 5)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add more than 24 hours should add days too', () => {
      const timer = new Timer()
      timer.addHour(36)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 12)
      assert.strictEqual(timer.day, 2)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add less than 0 hour should only add minutes and seconds', () => {
      const timer = new Timer()
      timer.addHour(0.53)
      assert.strictEqual(timer.second, 48)
      assert.strictEqual(timer.minute, 31)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Days', () => {
    it('add days should add given number of days', () => {
      const timer = new Timer()
      timer.addDay(4)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 5)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add a real number of days should add hours and minutes and seconds too', () => {
      const timer = new Timer()
      timer.addDay(3.19)
      assert.strictEqual(timer.second, 36)
      assert.strictEqual(timer.minute, 33)
      assert.strictEqual(timer.hour, 4)
      assert.strictEqual(timer.day, 4)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add more than 31 days for first month should add month too', () => {
      const timer = new Timer()
      timer.addDay(36)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 6)
      assert.strictEqual(timer.month, 2)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add less than 0 day should only add hours, minutes and seconds', () => {
      const timer = new Timer()
      timer.addDay(0.53)
      assert.strictEqual(timer.second, 11)
      assert.strictEqual(timer.minute, 43)
      assert.strictEqual(timer.hour, 12)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Months', () => {
    it('add months should add given number of months', () => {
      const timer = new Timer()
      timer.addMonth(2)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 3)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add a real number of months should add days, hours, minutes and seconds too', () => {
      const timer = new Timer()
      timer.addMonth(2.43)
      assert.strictEqual(timer.second, 12)
      assert.strictEqual(timer.minute, 55)
      assert.strictEqual(timer.hour, 7)
      assert.strictEqual(timer.day, 14)
      assert.strictEqual(timer.month, 3)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add more than 12 months for first month should add year too', () => {
      const timer = new Timer()
      timer.addMonth(25)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 2)
      assert.strictEqual(timer.year, 3)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add less than 0 month should only add days, hours, minutes and seconds', () => {
      const timer = new Timer()
      timer.addMonth(0.14)
      assert.strictEqual(timer.second, 36)
      assert.strictEqual(timer.minute, 9)
      assert.strictEqual(timer.hour, 8)
      assert.strictEqual(timer.day, 5)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
  describe('Years', () => {
    it('add years should add given number of years', () => {
      const timer = new Timer()
      timer.addYear(4)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 0)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 1)
      assert.strictEqual(timer.month, 1)
      assert.strictEqual(timer.year, 5)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add a real number of years should add months, days, hours, minutes and seconds too', () => {
      const timer = new Timer()
      timer.addYear(1.84)
      assert.strictEqual(timer.second, 0)
      assert.strictEqual(timer.minute, 36)
      assert.strictEqual(timer.hour, 9)
      assert.strictEqual(timer.day, 3)
      assert.strictEqual(timer.month, 11)
      assert.strictEqual(timer.year, 2)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
    it('add less than 0 month should only add months, days, hours, minutes and seconds', () => {
      const timer = new Timer()
      timer.addYear(0.14)
      assert.strictEqual(timer.second, 36)
      assert.strictEqual(timer.minute, 57)
      assert.strictEqual(timer.hour, 0)
      assert.strictEqual(timer.day, 20)
      assert.strictEqual(timer.month, 2)
      assert.strictEqual(timer.year, 1)
      assert.strictEqual(timer.monthDays.length, 12)
      assert.strictEqual(timer.weekLength, 7)
    })
  })
})

describe('Timer Emitter', () => {
  it('should emit tick event', (done) => {
    let minute = 30
    const timer = new Timer({
      im : minute,
      ih : 12,
      id : 4,
      it : 4,
      iy : 3511,
    })
    timer.on('tick', (date) => {
      assert.strictEqual(date.minute, minute + 2)
      minute = date.minute
      if (minute > 50) {
        timer.stop()
        done()
      }
    })
    timer.start({ mps : 2 })
  })
})
